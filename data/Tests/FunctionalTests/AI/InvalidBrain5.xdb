<?xml version="1.0" encoding="UTF-8"?>
<gameMechanics.world.mob.behaviour.brain.MobBrainResource>
  <Header>
		<resourceId>30414</resourceId>
	</Header>
	<memoryVariables>
		<Item type="gameMechanics.world.mob.behaviour.components.variables.BoolVariable">
			<value>false</value>
			<name>pursuitToComfort</name>
		</Item>  
	</memoryVariables>
	<!--==============================================================================================-->
  <!--============================================STATES============================================-->
  <!--==============================================================================================-->
  <root type="gameMechanics.world.behaviour.genericBrain.AIStatesGroupNode">
    <name>Root</name>
		<groupType>Static</groupType>
    <subnodes>
      <!--0-->
      <Item type="gameMechanics.world.behaviour.genericBrain.AIStatesGroupNode">
				<groupType>Static</groupType>
        <name>AliveStatesGroup</name>
        <subnodes>
          <!--0-->
          <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
            <name>WaitAvatar</name>
						<state type="gameMechanics.world.mob.behaviour.components.states.AIStateWaitAvatar"/>
          </Item>

          <!--1-->
          <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
            <name>ReturnState</name>
						<state type="gameMechanics.world.mob.behaviour.components.states.AIStateReturn">
							<interruptPos name="interruptPos"/>
							<moveType name="moveType"/>
						</state>
            <reaction type="gameMechanics.world.mob.behaviour.brain.MobBrainReaction">
              <effects>
                <Item type="gameMechanics.elements.effects.DamageZeroSuppressor"/>
                <Item type="gameMechanics.elements.effects.ImmunityToAllBuffs"/>
                <Item type="gameMechanics.elements.effects.EffectSpeedModifier">
									<effectScaler type="gameMechanics.elements.scalers.ExponentialEffectScaler">
										<base>2</base>
									</effectScaler>
                </Item>
              </effects>
            </reaction>
            <mandatory>
              <Item>
                <to>WaitAvatar</to>
              </Item>
              <Item>
                <to>WaitAvatar</to>
              </Item>
            </mandatory>
          </Item>

          <!--4-->
          <Item type="gameMechanics.world.behaviour.genericBrain.AIStatesGroupNode">
            <name>AttackStatesGroup</name>
						<groupType>Static</groupType>
            <subnodes>
              <!--0-->
              <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
                <name>PursuitState</name>
								<state type="gameMechanics.world.mob.behaviour.components.states.AIStatePursuit">
									<moveType name="moveType"/>
									<pursuitToComfort name="pursuitToComfort"/>
								</state>
                <mandatory>
                  <Item/>
                  <Item/>
                  <Item>
                    <to>AttackState</to>
                    <pipe type="gameMechanics.world.mob.behaviour.components.pipes.TargetAddressPipe"/>
                  </Item>
                </mandatory>
              </Item>

              <!--1-->
              <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
								<state type="gameMechanics.world.mob.behaviour.components.states.AIStateAttack">
									<moveType name="moveType"/>
									<pursuitToComfort name="pursuitToComfort"/>
								</state>
                <name>AttackState</name>
                <mandatory>
                  <Item/>
                  <Item>
                    <to>PursuitState</to>
                    <pipe type="gameMechanics.world.mob.behaviour.components.pipes.TargetAddressPipe"/>
                  </Item>
                  <Item/>
                </mandatory>
              </Item>
            </subnodes>
            <initialState>AttackState</initialState>
            <exitTypes>
              <Item>
                <type>gameMechanics.world.behaviour.basicComponents.AIState</type>
              </Item>
            </exitTypes>
            <exitsRemap>
              <Item>
                <from>1</from>
                <exit>10</exit>
                <groupExit>0</groupExit>
              </Item>
              <Item>
                <from>1</from>
                <exit>2</exit>
                <groupExit>0</groupExit>
              </Item>
              <Item>
                <from>0</from>
                <exit>0</exit>
                <groupExit>0</groupExit>
              </Item>
              <Item>
                <from>0</from>
                <exit>1</exit>
                <groupExit>0</groupExit>
              </Item>
            </exitsRemap>
            <mandatory>
              <Item>
                <to>ReturnState</to>
              </Item>
            </mandatory>
          </Item>
        </subnodes>


        <initialState>WaitAvatar</initialState>
        <optional>
          <Item>
            <to>DeadState</to>
            <pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
              <eventType>gameMechanics.elements.events.EventDeath</eventType>
            </pipe>
          </Item>
        </optional>
      </Item>

      <!--1-->
      <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
        <name>DeadState</name>
				<state type="gameMechanics.world.mob.behaviour.components.states.AIStateIdle"/>
        <optional>
          <Item>
            <to>AliveStatesGroup</to>
            <pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
              <eventType>gameMechanics.elements.events.EventRevive</eventType>
            </pipe>
          </Item>
        </optional>
      </Item>
    </subnodes>
    <initialState>DeadState</initialState>
  </root>

</gameMechanics.world.mob.behaviour.brain.MobBrainResource>
