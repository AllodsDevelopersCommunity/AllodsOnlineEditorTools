<?xml version="1.0" encoding="UTF-8"?>
<gameMechanics.world.mob.behaviour.brain.MobBrainResource>
  <Header>
		<resourceId>30415</resourceId>
	</Header>
	<!--==============================================================================================-->
  <!--============================================STATES============================================-->
  <!--==============================================================================================-->
  <root type="gameMechanics.world.behaviour.genericBrain.AIStatesGroupNode">
    <name>Root</name>
		<groupType>Static</groupType>
    <subnodes>
      <!--0-->
      <Item type="gameMechanics.world.behaviour.genericBrain.AIStatesGroupNode">
				<groupType>Static</groupType>
        <name>AliveStatesGroup</name>
        <subnodes>
          <!--0-->
          <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
            <name>WaitAvatar</name>
						<state type="gameMechanics.world.mob.behaviour.components.states.AIStateWaitAvatar"/>
            <optional>
              <Item>
                <to>NaturalStatesGroup</to>
                <pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
                  <eventType>gameMechanics.world.mob.behaviour.aiMsgs.WakeUpMsg</eventType>
                </pipe>
              </Item>
            </optional>
          </Item>

          <!--1-->
          <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
            <name>ReturnState</name>
						<state type="gameMechanics.world.mob.behaviour.components.states.AIStateReturn">
							<interruptPos name="interruptPos"/>
							<moveType name="moveType"/>
						</state>
            <reaction type="gameMechanics.world.mob.behaviour.brain.MobBrainReaction">
              <effects>
                <Item type="gameMechanics.elements.effects.DamageZeroSuppressor"/>
                <Item type="gameMechanics.elements.effects.ImmunityToAllBuffs"/>
                <Item type="gameMechanics.elements.effects.EffectSpeedModifier">
									<effectScaler type="gameMechanics.elements.scalers.ExponentialEffectScaler">
										<base>2</base>
									</effectScaler>
                </Item>
              </effects>
            </reaction>
            <mandatory>
              <Item>
                <to>NaturalStatesGroup</to>
              </Item>
              <Item>
                <to>NaturalStatesGroup</to>
              </Item>
            </mandatory>
          </Item>

          <!--2-->
          <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
            <name>TalkState</name>
						<state type="gameMechanics.world.mob.behaviour.components.states.AIStateTalk">
							<interlocutors name="interlocutors"/>
						</state>
            <mandatory>
              <Item>
                <to>NaturalStatesGroup</to>
              </Item>
            </mandatory>
            <optional>
              <Item>
                <to>ReturnState</to>
                <pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
                  <eventType>gameMechanics.world.mob.behaviour.aiMsgs.MsgReturnToIdle</eventType>
                </pipe>
              </Item>
            </optional>
          </Item>

          <!--3-->
          <Item type="gameMechanics.world.behaviour.genericBrain.AIStatesGroupNode">
            <name>NaturalStatesGroup</name>
						<groupType>Dynamic</groupType>
            <subnodes>
              <!--0-->
              <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
                <name>GuardState</name>
								<state type="gameMechanics.world.mob.behaviour.components.states.AIStateGuard">
									<interruptPos name="interruptPos"/>
									<spawnPos name="spawnPos"/>
								</state>
                <mandatory>
                  <Item/>
                </mandatory>
              </Item>

              <!--1-->
              <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
								<state type="gameMechanics.world.mob.behaviour.components.states.AIStateRoaming">
									<interruptPos name="interruptPos"/>
								</state>
                <name>RoamingState</name>
                <mandatory>
                  <Item/>
                </mandatory>
              </Item>

              <!--2-->
              <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
                <name>PatrolState</name>
								<state type="gameMechanics.world.mob.behaviour.components.states.AIStatePatrol">
									<interruptPos name="interruptPos"/>
									<moveType name="moveType"/>
								</state>
                <mandatory>
                  <Item/>
                </mandatory>
              </Item>

              <!--3-->
              <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
								<state type="gameMechanics.world.mob.behaviour.components.states.AIStateGoThroughPath">
									<interruptPos name="interruptPos"/>
								</state>
                <name>GoThroughPathState</name>
                <mandatory>
                  <Item/>
                </mandatory>
              </Item>
            </subnodes>
            <initialState>GuardState</initialState>
            <exitTypes>
              <Item>
                <type>gameMechanics.world.behaviour.basicComponents.TargetProvider</type>
              </Item>              
            </exitTypes>
            <exitsRemap>
              <Item>
                <from>0</from>
                <exit>0</exit>
                <groupExit>10</groupExit>
              </Item>
              <Item>
                <from>1</from>
                <exit>0</exit>
                <groupExit>0</groupExit>
              </Item>
              <Item>
                <from>2</from>
                <exit>0</exit>
                <groupExit>0</groupExit>
              </Item>
              <Item>
                <from>3</from>
                <exit>0</exit>
                <groupExit>0</groupExit>
              </Item>
            </exitsRemap>
            
            <mandatory>
              <Item>
                <to>WaitAvatar</to>
                <pipe type="gameMechanics.world.mob.behaviour.components.pipes.TargetAddressPipe"/>
              </Item>
            </mandatory>
            <optional>
              <Item>
                <to>TalkState</to>
                <pipe type="gameMechanics.world.mob.behaviour.components.pipes.StartTalkPipeResource"/>
              </Item>
              <Item>
                <to>WaitAvatar</to>
                <pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
                  <eventType>gameMechanics.world.mob.behaviour.aiMsgs.FallAsleepMsg</eventType>
                </pipe>
              </Item>
            </optional>
          </Item>
				</subnodes>
        <initialState>WaitAvatar</initialState>
        <optional>
          <Item>
            <to>DeadState</to>
            <pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
              <eventType>gameMechanics.elements.events.EventDeath</eventType>
            </pipe>
          </Item>
        </optional>
      </Item>
			
      <!--1-->
      <Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
        <name>DeadState</name>
				<state type="gameMechanics.world.mob.behaviour.components.states.AIStateIdle"/>
        <optional>
          <Item>
            <to>AliveStatesGroup</to>
            <pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
              <eventType>gameMechanics.elements.events.EventRevive</eventType>
            </pipe>
          </Item>
        </optional>
      </Item>
    </subnodes>
    <initialState>DeadState</initialState>
  </root>

</gameMechanics.world.mob.behaviour.brain.MobBrainResource>
